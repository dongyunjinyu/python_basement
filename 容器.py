####################################################
################### 列表与元组 #######################
#列表会预留内存空间，而元组不会，所以如果变量数量确定就尽量用元组
#元组与列表的区别在于：元组比列表的运算速度快，而且元组的数据比较安全。元组是不可改变的，为了保护其内容不被外部接口修改，不具有 append，extend，remove，pop,index这些功能；而列表是可更改的。所有有些时候我们需要两者相互转换，tuple()相当于冻结一个列表，而list（）相当于解冻一个元组。冻结吧~
#元组有序，逗号其实就是一种元组
#比如交换顺序：
#a,b=b,a
#其实就是(a,b)=(b,a)


#定义一个元组：
a=(1,2)
a=1,2
lst=[1,2];a=tuple(lst)
print(a)
print(a,'a',type(a))

###############################################
################### 字典 #######################
#创建字典
dic={'jia':12,'yi':14}
#dic=dict()#这里面放别的容器，但是元素是若干个元组，每个元组有两个元素，第一个是键，第二个是值
#比如
lst=[('a',1),('b',2),('c',3),('d',4)]
dic=dict(lst)
print(dic)
#字典的增删改查都是通过key来索引的，key是可哈希的一个值
dic={'a': 1, 'b': 2, 'c': 3, 'd': 4}

dic['e']=5  #增
print(dic)

print(dic['a'])    #查
key='f'
if key in dic:      #如果键不存在会报错，所以先检查键是否存在
    print(dic[key])
else:print("该键不存在")

dic['e']=6     #改
print(dic)

del dic['e']    #删
print(dic)

for key in dic:    #遍历
    print(dic[key])

print(dic.values())  #值函数，将所有的值放到一个特殊的列表里
print(type(dic.values()))   #    dict_values
for value in dic.values():    #这样就遍历了字典的值
     print(value)

for item in dic.items():   #遍历获取key和value
    print(item)
    #  >>>('a', 1)
    # ('b', 2)
    # ('c', 3)
    # ('d', 4)      #以元组的形式打印出来的
for key,value in dic.items():  #拆开获得的元组
    print(key)
    print(value)

print(list(dic))    # 将字典转化为列表，保留key，这样就可用数字来索引字典
#  >>>['a', 'b', 'c', 'd']
print(list(dic)[2])
#  >>>c


###################################################
################### 字符串进阶 #######################
print("#"*33)
"""
.format方法
格式：
"字符串{<索引>:<填充符><对齐方式><符号><#><占位长度><.精确度><数据类型>}字符串{……}字符串".format(数据)
         1      2       3      4   5     6       7        8
format方法有两个部分，一个是{}中的参数部分，一个是（）中的数据部分，重点是{}中的参数部分
字符串常用：1、3、6
数字常用：1、3、4、5、6、7、8

参数多，也说明了这个方法的功能十分丰富，下面我们一个参数一个参数地进行介绍
"""

# 究其根本，{}是一个占位符，在字符串中起到了临时占位的功能，把format()中的内容再放进去
abc=123
print('这是一个数据：{}'.format(abc))
# >>这是一个数据：123
# 这样一来，就能在字符串里加载变量，如果我们修改abc的值只需在赋值处修改即可，不需修改字符串，就很方便

#看第1个参数，<索引>，就是指定显示位置的，只有例子能说清楚
#索引前：
print('西游记中师徒四人先后分别叫：{}，{}，{}，{}'.format('沙悟净','唐三藏','孙悟空','猪八戒'))
# >>西游记中师徒四人先后分别叫：沙悟净，唐三藏，孙悟空，猪八戒
# 这个顺序不对，但是我们不用修改数据，只需要使用索引就可以改正顺序：
print('西游记中师徒四人先后分别叫：{1}，{2}，{3}，{0}'.format('沙悟净','唐三藏','孙悟空','猪八戒'))
# >>西游记中师徒四人先后分别叫：唐三藏，孙悟空，猪八戒，沙悟净
#这个就对了，可以看到索引依旧是从0开始计数的，索引的默认值是正序索引，也就是012345……

#如果要使用后面七个参数，就要先打一个冒号
# 看第2、3个参数：<填充符><对齐方式>
# 使用参数前：
print('一组数据:{},{},{}'.format(123,'shuju','[4,5,6]'))
#  >>一组数据:123,shuju,[4,5,6]
# 使用参数后：
print('一组数据:{:0<},{:^},{:#>}'.format(123,'shuju','[4,5,6]'))
#  >>一组数据:123,shuju,[4,5,6]
#可以看到，并没有什么变化，这是因为要结合第5个参数<占位长度>使用：
print('一组数据:{:0<8},{:^10},{:#>16}'.format(123,'shuju','[4,5,6]'))
#  >>一组数据:12300000,  shuju   ,#########[4,5,6]
# 看! 3个{}中我们分别指定占位符是：零、空格（默认）、井号 ；我们输入的内容无法占据全部规定长度，剩余长度就用规定的填充符占据
# 对齐方式为：居中对齐、左对齐、右对齐；
# 数字类型默认=对齐，其他类型一般默认左对齐，
# =对齐：数字的符号左对齐，值右对齐，只对数字类型生效，一般结合第4个参数<符号>来使用

# 第4个参数，<符号>，只对数字类型生效,使用此参数需搭配<对齐方式>参数
# + ：正数前加+，负数前加-
# - ：正数前不加+，负数前加-   （默认）
#   ：正数前加空格，负数前加-   (那是个空格)
print('一组数字:{},{},{}'.format(+1.23,-123,8*12))
# >>一组数字:1.23,-123,96
print('一组数字:{:0=+8},{:0>-8},{:0^ 8}'.format(+1.23,-123,8*12))
# >>一组数字:+0001.23,0000-123,00 96000

#第5个参数，<#>,如果输出的数字不是十进制数，则标注进制，需结合第5个参数<数据类型>使用
print('{:0=+#8x}'.format(-255))
# >>-0x000ff
# 这里我们直接使用了第8个参数，规定输出数字为十六进制数

#第6个参数，<占位长度>，使打印结果美观整齐

#第7个参数，<.精确度>，用来指定数字的精确度
print('{:.2f}'.format(-255))
# >>-255.00

#第8个参数，<数据类型>，用来指定输出数据的类型
# s：字符串    e：科学计数法    d：十进制整数     b：二进制数    x：十六进制数     o：八进制数     c：码转符
# %：百分比    f：浮点数        ,：逗号每三位分隔
print('{:e}'.format(25588.3))
# >>2.558830e+04

#数字类型可以把参数叠满
print('{1:@>+#10.3f}'.format(888.8, 666.6))
#自己想想打印结果是什么
# 解：索引为1，输入第二个数据也就是666.6    .3f保留三位小数666.600    +带正号也就是+666.600
#    10占位长度为10，差2个字符，用@补     >带着符号右对齐@@+666.600     #由于该数字是十进制，所以没有进制提示
# >>@@+666.600

# 简写形式：不要索引了，换成原来括号里的内容，然后引号前加个f
print(f'{666.6:@>+#10.3f}')
# >>@@+666.600
